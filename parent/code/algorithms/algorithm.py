from parent.code.classes.railnl import RailNL
from parent.code.classes.route import Route
import matplotlib.pyplot as plt 

class Algorithm:
    """Base algorithm script.
    """

    def __init__(self, load: RailNL) -> None:
        self.load = load
        self.routes: list[Route] = []
        self.total_minutes: int = 0
        self.total_connections_used: set[tuple[str, str, float]] = set()
        self.stations_used = set()


    def run(self) -> None:
        """Run the algorithm to generate routes.
        """
        raise NotImplementedError("Subclasses should implement this!")
    

    def output(self) -> list[Route]:
        """Returns the routes generated by the algorithm
        
        Post: list of generated routes
        """
        return self.routes
    
    # def nice_output(self) -> None:
    #     for route in self.routes


    def number_of_routes(self) -> int:
        """Get the number of routes generated by the algorithm
        
        Post: number of routes as an integer
        """
        return len(self.routes)
    

    def get_total_connections_used(self) -> set[tuple[str, str, float]]:
        """Get the connections used by the algorithm.
        
        Post: returns a set with all the different connections used by 
        the algorithm as tuples containing two staions and the distance
        between them. A connection from B to A is regarded as the same 
        as the connection from A to B.
        """
        for route in self.routes:
            for connection_list in route.get_connections_used():

                # Ensure connection is a tuple
                connection = tuple(connection_list)  

                # Create the reverse connection tuple
                reverse_connection = (connection[1], connection[0], connection[2]) 

                # check if the connection has already been used, 
                # add the connection if not
                if reverse_connection not in self.total_connections_used:
                    self.total_connections_used.add(connection)

        return set(self.total_connections_used)
    
    def get_stations_used(self) -> set:
        """Makes a set of the stations that are used in the output routes
        
        Post: a set of station
        """
        for route in self.routes:
            for station in route.get_stations():
                self.stations_used.add(station)
        return self.stations_used

    def get_total_minutes(self) -> int:
        """Calculates the total number of minutes used by all the 
        different routes generated by the algorithm.
        
        Post: number of minutes as an integer
        """
        for route in self.routes:
            self.total_minutes += route.time
        return self.total_minutes
    

    